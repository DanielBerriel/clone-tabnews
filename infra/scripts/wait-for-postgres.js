//Utilizamos o m√≥dulo child_process do node. Esse modo permite criar um processo filho e puxar o m√©todo exec, que nos permite executar comandos externos;
const { exec } = require("node:child_process");

function checkPostgres() {
  //Nessa situa√ß√£o o m√©todo exec aceita dois par√¢metros por padr√£o. O comando em si e uma fun√ß√£o de callback.
  //Ao utilizar o --host localhost, fazemos o pg_isready que trabalha com uma conex√£o socket UNIX, que √© uma maneira de se comunicar sem usar a rede interna (diretamente pelo sistema de arquivos do sistema operacional, sendo mais r√°pido e leve);
  //S√≥ que como o node pg-migrate utiliza TCP/IP (se conecta na inst√¢ncia que est√° em localhost) e isso causa uma condi√ß√£o de corrida. Que pode ser facilmente resolvida com esse comando que faz o pg-isready verificar a conex√£o TCP/IP.
  exec("docker exec postgres-dev pg_isready --host localhost", handleReturn);

  function handleReturn(error, stdout) {
    //error (execu√ß√£o com erro), stdout (standard output), stderr (standard error)
    //stdout e stderr s√£o canais pr√©-definidos que os programas usam pra se comunicar entre si. Sendo o stdout usado para exibir a sa√≠da de um programa. E stderr para exibir a sa√≠da de error.
    //m√©todo search busca algo dentro da string. Caso esse m√©todo n√£o encontre o valor buscado, retorna -1
    if (stdout.search("accepting connections") === -1) {
      //vamos usar o process.stdout.write no lugar de um console.log. O write escreve na sa√≠da do processo. Fazemos isso porque o console.log gera uma quebra de linha por padr√£o e iria atrapalhar a visualiza√ß√£o que queremos construir.
      process.stdout.write(".");
      checkPostgres();
      return;
    }

    console.log("\nüü¢ Postgres est√° pronto e aceitando conex√µes!\n");
  }
}

process.stdout.write("\n\nüî¥ Aguardando Postgres aceitar conx√µes");
checkPostgres();
